



Using TLS in Applications                                    D. Margolis
Internet-Draft                                                 M. Risher
Intended status: Standards Track                             Google, Inc
Expires: January 9, 2017                                 B. Ramakrishnan
                                                             Yahoo!, Inc
                                                              A. Brotman
                                                            Comcast, Inc
                                                                J. Jones
                                                          Microsoft, Inc
                                                            July 8, 2016


                   SMTP MTA Strict Transport Security
                       draft-ietf-uta-mta-sts-01

Abstract

   SMTP MTA-STS is a mechanism enabling mail service providers to
   declare their ability to receive TLS-secured connections, to declare
   particular methods for certificate validation, and to request that
   sending SMTP servers report upon and/or refuse to deliver messages
   that cannot be delivered securely.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on January 9, 2017.

Copyright Notice

   Copyright (c) 2016 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of



Margolis, et al.         Expires January 9, 2017                [Page 1]

Internet-Draft                   MTA-STS                       July 2016


   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Related Technologies  . . . . . . . . . . . . . . . . . . . .   3
     2.1.  Differences from DANE . . . . . . . . . . . . . . . . . .   4
   3.  Policy Semantics  . . . . . . . . . . . . . . . . . . . . . .   4
     3.1.  Formal Definition . . . . . . . . . . . . . . . . . . . .   5
       3.1.1.  TXT Record  . . . . . . . . . . . . . . . . . . . . .   5
       3.1.2.  SMTP MTA-STS Policy . . . . . . . . . . . . . . . . .   5
     3.2.  Policy Expiration . . . . . . . . . . . . . . . . . . . .   6
       3.2.1.  Policy Updates  . . . . . . . . . . . . . . . . . . .   7
     3.3.  Policy Discovery & Authentication . . . . . . . . . . . .   7
     3.4.  Policy Validation . . . . . . . . . . . . . . . . . . . .   7
     3.5.  Policy Application  . . . . . . . . . . . . . . . . . . .   8
       3.5.1.  MX Preference in Enforce Mode . . . . . . . . . . . .   8
       3.5.2.  Policy Application Control Flow . . . . . . . . . . .   8
   4.  Failure Reporting . . . . . . . . . . . . . . . . . . . . . .   9
   5.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   9
   6.  Security Considerations . . . . . . . . . . . . . . . . . . .   9
   7.  Contributors  . . . . . . . . . . . . . . . . . . . . . . . .  10
   8.  Appendix 1: Validation Pseudocode . . . . . . . . . . . . . .  10
   9.  Appendix 2: Domain Owner STS example record . . . . . . . . .  10
     9.1.  Example 1 . . . . . . . . . . . . . . . . . . . . . . . .  10
   10. Normative References  . . . . . . . . . . . . . . . . . . . .  11
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  12

1.  Introduction

   The STARTTLS extension to SMTP [RFC3207] allows SMTP clients and
   hosts to negotiate the use of a TLS channel for secure mail
   transmission.

   While such _opportunistic_ encryption protocols provide a high
   barrier against passive man-in-the-middle traffic interception, any
   attacker who can delete parts of the SMTP session (such as the "250
   STARTTLS" response) or who can redirect the entire SMTP session
   (perhaps by overwriting the resolved MX record of the delivery
   domain) can perform downgrade or interception attacks.





Margolis, et al.         Expires January 9, 2017                [Page 2]

Internet-Draft                   MTA-STS                       July 2016


   This document defines a mechanism for recipient domains to publish
   policies specifying:

   o  whether MTAs sending mail to this domain can expect TLS support

   o  how to validate the names of the domain's MX hosts

   o  what a conforming client should do with messages when TLS cannot
      be successfully negotiated

   The mechanism described is separated into three logical components:

   1.  policy semantics: whether senders can expect a server for the
       recipient domain to support TLS encryption

   2.  policy discovery & authentication: how to discover a domain's
       published STS policy and determine the authenticity of that
       policy

   3.  failure handling: what sending MTAs should do in the case of
       policy failures

1.1.  Terminology

   The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD,
   SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL, when they appear in this
   document, are to be interpreted as described in [RFC2119].

   We also define the following terms for further use in this document:

   o  STS Policy: A definition of the expected TLS availability and
      behavior, as well as the desired actions for a given domain when a
      sending MTA encounters different results.

   o  Policy Domain: The domain against which an STS Policy is defined.

   o  Policy Authentication: Authentication of the STS policy retrieved
      for a recipient domain by the sender.

2.  Related Technologies

   The DANE TLSA record [RFC7672] is similar, in that DANE is also
   designed to upgrade opportunistic, unauthenticated encryption into
   required, authenticated encryption.  DANE requires DNSSEC [RFC4033]
   for authentication; the mechanism described here instead relies on
   certificate authorities (CAs) and does not require DNSSEC.





Margolis, et al.         Expires January 9, 2017                [Page 3]

Internet-Draft                   MTA-STS                       July 2016


2.1.  Differences from DANE

   The primary difference between the mechanism described here and DANE
   is that DANE requires the use of DNSSEC to authenticate DANE TLSA
   records, whereas SMTP MTA-STS relies on the certificate authority
   (CA) system to avoid interception.  (For a thorough discussion of
   this trade-off, see the section _Security_ _Considerations_.)

   In addition, SMTP MTA-STS provides an optional report-only mode,
   enabling soft deployments to detect policy failures.

3.  Policy Semantics

   SMTP MTA-STS policies are distributed via a "well known" HTTPS
   endpoint in the Policy Domain.  A corresponding TXT record in the DNS
   signals to sending MTAs the presence of a policy file.

   *The MTA-STS TXT record MUST specify the following fields:*

   o  "v": (plain-text, required).  Currently only "STSv1" is supported.

   o  "id": (plain-text, required).  A short string used to track policy
      updates.  This string MUST uniquely identify a given instance of a
      policy, such that senders can determine when the policy has been
      updated by comparing to the "id" of a previously seen policy.

   A lenient parser SHOULD accept a policy file implementing a superset
   of this specification, in which case unknown values SHALL be ignored.

   *Policies MUST specify the following fields in JSON* [RFC4627]
   *format:*

   o  "version": (plain-text, required).  Currently only "STSv1" is
      supported.

   o  "mode": (plain-text, required).  If "enforce", the receiving MTA
      requests that messages be delivered only if they conform to the
      STS policy.  If "report" the receiving MTA requests that failure
      reports be delivered, as specified by the "rua" parameter.

   o  "mx": MX patterns (list of plain-text MX match patterns,
      required).  One or more comma-separated patterns matching the
      expected MX for this domain.  For example, "["*.example.com",
      "*.example.net"]" indicates that mail for this domain might be
      handled by any MX whose hostname is a subdomain of "example.com"
      or "example.net".  The semantics for these patterns should be the
      ones found in the "Checking of Wildcard Certificates" rules in
      Section 6.4.3 of [RFC6125].



Margolis, et al.         Expires January 9, 2017                [Page 4]

Internet-Draft                   MTA-STS                       July 2016


   o  "max_age": Max lifetime of the policy (plain-text integer
      seconds).  Well-behaved clients SHOULD cache a policy for up to
      this value from last policy fetch time.

   A lenient parser SHOULD accept a policy file which is valid JSON
   implementing a superset of this specification, in which case unknown
   values SHALL be ignored.

3.1.  Formal Definition

3.1.1.  TXT Record

   The formal definition of the "_mta_sts" TXT record, defined using
   [RFC5234], is as follows:

      sts-text-record = sts-version *WSP %x3B *WSP sts-id

      sts-version     = "v" *WSP "=" *WSP %x53 %x54        ; "STSv1"
                        %x53 %x76 %x31

      sts-id          = "id" *WSP "=" *WSP 1*32(ALPHA / DIGIT)

3.1.2.  SMTP MTA-STS Policy

   The formal definition of the SMTP MTA-STS policy, using [RFC5234], is
   as follows:

























Margolis, et al.         Expires January 9, 2017                [Page 5]

Internet-Draft                   MTA-STS                       July 2016


sts-record      = WSP %x7B WSP  ; { left curly bracket
                  sts-element   ; comma-separated
                  [             ; list
                  WSP %x2c WSP  ; of
                  sts-element   ; sts-elements
                  ]
                  WSP %x7d WSP  ; } right curly bracket

sts-element     = sts-version / sts-mode / sts-id / sts-mx / sts-max_age

sts-version     = %x22 "version" %x22 *WSP %x3a *WSP ; "version":
                  %x22 %x53 %x54 %x53 %x76 %x31      ; "STSv1"

sts-mode        = %x22 "mode" %x22 *WSP %x3a *WSP    ; "mode":
                  %x22 ("report" / "enforce") %x22   ; "report"/"enforce"

sts-mx          = %x22 "mx" $x22 *WSP %x3a *WSP      ; "mx":
                  %x5B                               ; [
                  domain-match                       ; comma-separated list
                  [WSP %x2c domain-match WSP]        ; of domain-matches
                  %x5B                               ; ]

sts-max_age     = %x22 "max_age" %x22 *WSP $x3a *WSP ; "max_age":
                  1*10DIGIT                          ; some digits

domain-match    = %x22 1*(dtext / "*") *("."         ; wildcard or label
                  1*dtext) %x22                      ; with 0+ more labels

dtext           = ALPHA / DIGIT / %2D                ; A-Z, a-z, 0-9, "-"

3.2.  Policy Expiration

   In order to resist attackers inserting a fraudulent policy, SMTP MTA-
   STS policies are designed to be long-lived, with an expiry typically
   greater than two weeks.  Policy validity is controlled by the
   lifetime indicated in the policy ("max_age=").  Senders SHOULD cache
   a policy (and apply it to all mail to the recipient domain) until the
   policy expiration.

   To mitigate the risks of long-lived cached policies (which otherwise
   may make it difficult for recipient domains to change infrastructure
   in ways which the policy forbids), domains can, at any time, publish
   an updated policy.  As described in _Policy_ _Application_, senders
   MUST fetch a new policy before treating a validation failure as a
   permanent delivery failure.






Margolis, et al.         Expires January 9, 2017                [Page 6]

Internet-Draft                   MTA-STS                       July 2016


3.2.1.  Policy Updates

   Updating the policy requires that the owner make changes in two
   places: the "_mta_sts" TXT record in the Policy Domain's DNS zone and
   at the corresponding HTTPS endpoint.  In the case where the HTTPS
   endpoint has been updated but the TXT record has not been, senders
   will not know there is a new policy released and may thus continue to
   use old, previously cached versions.  Recipients should thus expect a
   policy will continue to be used by senders until both the HTTPS and
   TXT endpoints are updated and the TXT record's TTL has passed.

3.3.  Policy Discovery & Authentication

   Senders discover a recipient domain's MTA-STS policy by fetching a
   TXT record from the recipient domain's DNS zone with the name
   "_mta_sts".  A valid TXT record at "_mta_sts.example.com" indicates
   that the domain "example.com" supports MTA-STS.

   When sending to a recipient domain for which a valid TXT record
   exists, a compliant sender will then fetch an HTTPS resource
   containing the policy body from a host at the "policy.mta-sts"
   subdomain of the policy domain, using a "well-known" path of ".well-
   known/mta-sts/current".  For "example.com", this would be
   "https://policy.mta-sts.example.com/.well-known/mta-sts/current".

   When fetching a new policy or updating a policy, the HTTPS endpoint
   MUST present a TLS certificate which is valid for the "policy.mta-
   sts" host (as described in [RFC6125]), chain to a root CA that is
   trusted by the sending CA, and be non-expired.

   A policy which has not ever been successfully authenticated MUST NOT
   be used to reject mail.

3.4.  Policy Validation

   When sending to an MX at a domain for which the sender has a valid
   and non-expired SMTP MTA-STS policy, a sending MTA honoring SMTP MTA-
   STS MUST validate that the recipient MX supports STARTTLS, and offers
   a valid PKIX based TLS certificate.  The certificate presented by the
   receiving MX MUST be valid for the MX name and chain to a root CA
   that is trusted by the sending MTA.  The certificate MUST have a CN
   or SAN matching the MX hostname (as described in [RFC6125]) and be
   non-expired.

   Note that this section does not dictate the behavior of sending MTAs
   when policies fail to validate; in particular, validation failures of
   policies which specify "report only" mode MUST NOT be interpreted as




Margolis, et al.         Expires January 9, 2017                [Page 7]

Internet-Draft                   MTA-STS                       July 2016


   delivery failures, as described in the section _Policy_
   _Application_.

3.5.  Policy Application

   When sending to an MX at a domain for which the sender has a valid,
   non-expired SMTP MTA-STS policy, a sending MTA honoring SMTP MTA-STS
   MAY apply the result of a policy validation one of two ways,
   depending on the value of the policy "mode" field:

   o  "report": In this mode, sending MTAs merely send a report (as
      described in the "TLSRPT" specification (TODO: add ref))
      indicating policy application failures.  This can be used for
      "soft" deployments, to ensure a policy will not cause domain-wide
      mail delivery failures while being adopted or during
      infrastructure changes.

   o  "enforce": In this mode, sending MTAs SHOULD treat STS policy
      failures as a mail delivery error, and SHOULD not deliver the
      message to this host.  However, note that MTAs that honor
      "enforce" mode MUST first check for the existing of an updated,
      authenticated policy before _permanently_ failing deliveries.
      This is to ensure that failures only occur if a sending MTA is in
      fact validating against the most recent version of the recipient
      domain's policy.

3.5.1.  MX Preference in Enforce Mode

   When applying a policy specifying "enforce" mode, sending MTAs SHOULD
   select recipient MXs by first eliminating any non-matching (as
   specified by the policy) MX hosts from the candidate MX RRSet and
   then attempting delivery to matching hosts as indicated by their MX
   priority, until delivery succeeds or the MX candidate set is empty.

   If none of the attempted MX hosts validate according to the policy,
   the policy MUST be refreshed at least once, as described in _Policy_
   _Discovery_ _&_ _Authentication_, before a message should be
   permanently rejected.

3.5.2.  Policy Application Control Flow

   The control flow for a sending MTA consists of the following steps:

   1.  Check for a cached, non-expired policy.  If none exists and the
       "_mta_sts" TXT record is present for the recipient domain, fetch
       a new policy, authenticate, and cache it.





Margolis, et al.         Expires January 9, 2017                [Page 8]

Internet-Draft                   MTA-STS                       July 2016


   2.  Validate recipient MX or MXs against policy.  If a valid MX is
       discovered, deliver mail and mark cached policy as "successfully
       applied."

   3.  If no valid recipient MX is found, the cached policy mode is
       "reject", and the cached policy has previously been successfully
       applied, temporarily fail the message.

   4.  Upon message retries, a message MAY be permanently failed
       following first checking for the presence of a new policy (as
       indicated by the "id" field in the "_mta_sts" TXT record).

4.  Failure Reporting

   Aggregate statistics on policy failures MAY be reported using the
   "TLSRPT" reporting specification (TODO: Add Ref).

5.  IANA Considerations

   There are no IANA considerations at this time.

6.  Security Considerations

   SMTP Strict Transport Security protects against an active attacker
   who wishes to intercept or tamper with mail between hosts who support
   STARTTLS.  There are two classes of attacks considered:

   o  Foiling TLS negotiation, for example by deleting the "250
      STARTTLS" response from a server or altering TLS session
      negotiation.  This would result in the SMTP session occurring over
      plaintext, despite both parties supporting TLS.

   o  Impersonating the destination mail server, whereby the sender
      might deliver the message to an impostor, who could then monitor
      and/or modify messages despite opportunistic TLS.  This
      impersonation could be accomplished by spoofing the DNS MX record
      for the recipient domain, or by redirecting client connections
      intended for the legitimate recipient server (for example, by
      altering BGP routing tables).

   SMTP Strict Transport Security relies on certificate validation via
   PKIX based TLS identity checking [RFC6125].  Attackers who are able
   to obtain a valid certificate for the targeted recipient mail service
   (e.g. by compromising a certificate authority) are thus out of scope
   of this threat model.

   Since we use DNS TXT record for policy discovery, an attacker who is
   able to block DNS responses can suppress the discovery of an STS



Margolis, et al.         Expires January 9, 2017                [Page 9]

Internet-Draft                   MTA-STS                       July 2016


   Policy, making the Policy Domain appear not to have an STS Policy.
   The caching model described in _Policy_ _Expirations_ is designed to
   resist this attack.

7.  Contributors

   Nicolas Lidzborski Google, Inc nlidz (at) google (dot com)

   Wei Chuang Google, Inc weihaw (at) google (dot com)

   Brandon Long Google, Inc blong (at) google (dot com)

   Franck Martin LinkedIn, Inc fmartin (at) linkedin (dot com)

   Klaus Umbach 1&1 Mail & Media Development & Technology GmbH
   klaus.umbach (at) 1und1 (dot de)

   Markus Laber 1&1 Mail & Media Development & Technology GmbH
   markus.laber (at) 1und1 (dot de)

8.  Appendix 1: Validation Pseudocode

policy = policy_from_cache()
if not policy or is_expired(policy):
  policy = policy_from_https_endpoint()  // fetch and authenticate!
  update_cache = true
if policy:
  if invalid_mx_or_tls(policy):  // check MX and TLS cert
    if rua:
      generate_report()
    if p_reject():
      policy = policy_from_https_endpoint()  // fetch and authenticate #2!
      update_cache = true
      if invalid_mx_or_tls(policy):
        reject_message()
        update_cache = false
  if update_cache:
    cache(policy)

9.  Appendix 2: Domain Owner STS example record

9.1.  Example 1

   The owner of example.com wishes to begin using STS with a policy that
   will solicit aggregate feedback from receivers without affecting how
   the messages are processed, in order to:

   o  Verify the identity of MXs that handle mail for this domain



Margolis, et al.         Expires January 9, 2017               [Page 10]

Internet-Draft                   MTA-STS                       July 2016


   o  Confirm that its legitimate messages are sent over TLS

   o  Verify the validity of the certificates

   o  Determine how many messages would be affected by a strict policy

   DNS STS policy indicator TXT record:

               _mta_sts  IN TXT ( "v=STSv1; id=randomstr;" )

   STS policy served from HTTPS endpoint of the policy (recipient)
   domain, and is authenticated using Web PKI mechanism.  The policy is
   fetched using HTTP GET method.

                      {
                        "version": "STSv1",
                        "mode": "report",
                        "policy_id": "randomstr",
                        "mx": ["*.mail.example.com"],
                        "max_age": 123456
                      }

   The policy is authenticated using Web PKI mechanism.

10.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, DOI 10.17487/
              RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

   [RFC3207]  Hoffman, P., "SMTP Service Extension for Secure SMTP over
              Transport Layer Security", RFC 3207, DOI 10.17487/RFC3207,
              February 2002, <http://www.rfc-editor.org/info/rfc3207>.

   [RFC4033]  Arends, R., Austein, R., Larson, M., Massey, D., and S.
              Rose, "DNS Security Introduction and Requirements", RFC
              4033, DOI 10.17487/RFC4033, March 2005,
              <http://www.rfc-editor.org/info/rfc4033>.

   [RFC4627]  Crockford, D., "The application/json Media Type for
              JavaScript Object Notation (JSON)", RFC 4627, DOI 10
              .17487/RFC4627, July 2006,
              <http://www.rfc-editor.org/info/rfc4627>.







Margolis, et al.         Expires January 9, 2017               [Page 11]

Internet-Draft                   MTA-STS                       July 2016


   [RFC5234]  Crocker, D., Ed. and P. Overell, "Augmented BNF for Syntax
              Specifications: ABNF", STD 68, RFC 5234, DOI 10.17487/
              RFC5234, January 2008,
              <http://www.rfc-editor.org/info/rfc5234>.

   [RFC6125]  Saint-Andre, P. and J. Hodges, "Representation and
              Verification of Domain-Based Application Service Identity
              within Internet Public Key Infrastructure Using X.509
              (PKIX) Certificates in the Context of Transport Layer
              Security (TLS)", RFC 6125, DOI 10.17487/RFC6125, March
              2011, <http://www.rfc-editor.org/info/rfc6125>.

   [RFC7672]  Dukhovni, V. and W. Hardaker, "SMTP Security via
              Opportunistic DNS-Based Authentication of Named Entities
              (DANE) Transport Layer Security (TLS)", RFC 7672, DOI 10
              .17487/RFC7672, October 2015,
              <http://www.rfc-editor.org/info/rfc7672>.

Authors' Addresses

   Daniel Margolis
   Google, Inc

   Email: dmargolis (at) google.com


   Mark Risher
   Google, Inc

   Email: risher (at) google (dot com)


   Binu Ramakrishnan
   Yahoo!, Inc

   Email: rbinu (at) yahoo-inc (dot com)


   Alexander Brotman
   Comcast, Inc

   Email: alexander_brotman (at) cable.comcast (dot com)


   Janet Jones
   Microsoft, Inc

   Email: janet.jones (at) microsoft (dot com)



Margolis, et al.         Expires January 9, 2017               [Page 12]
